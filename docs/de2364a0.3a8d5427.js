(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{90:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return b}));var n=a(3),r=a(7),i=(a(0),a(99)),o={id:"validator",title:"Validator"},l={unversionedId:"validator",id:"validator",isDocsHomePage:!1,title:"Validator",description:"Validators come to action when you are working with the user input. Silvie has a built-in Validator helper class to",source:"@site/docs\\validator.md",slug:"/validator",permalink:"/docs/validator",editUrl:"https://github.com/silviejs/silviejs.github.io/tree/main/website/docs/validator.md",version:"current",sidebar:"docsSidebar",previous:{title:"Models",permalink:"/docs/models"},next:{title:"Validation Rules",permalink:"/docs/validation-rules"}},s=[{value:"Validator",id:"validator",children:[{value:"Rules Object",id:"rules-object",children:[]},{value:"Messages Object",id:"messages-object",children:[]},{value:"Path Strings",id:"path-strings",children:[]},{value:"Errors",id:"errors",children:[]}]}],c={rightToc:s};function b(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Validators come to action when you are working with the user input. Silvie has a built-in ",Object(i.b)("inlineCode",{parentName:"p"},"Validator")," helper class to\nhandle the validations in your application. The main idea is to validate an object containing various kinds of data. The\ntechnique used in this class was inspired from the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://laravel.com/docs/8.x/validation"}),"Validation from Laravel Framework"),". "),Object(i.b)("h2",{id:"validator"},"Validator"),Object(i.b)("p",null,"The validator class can be imported from ",Object(i.b)("inlineCode",{parentName:"p"},"silvie/validator"),". You need to create an instance of this object and specify\nyour data and validation rules in the constructor."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"data")," ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"}),"<object",">")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"rules")," ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"}),"<object",">")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"messages?")," ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"}),"<object",">")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"generateNestedErrors?")," ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type"}),"<boolean",">")," default: ",Object(i.b)("inlineCode",{parentName:"li"},"true"))),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"data")," should be an object containing the data that needs to be validated."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"rules")," parameter should be an object containing the path to each piece of data with its corresponding validation\nrule string. This will be explained in detail in ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#rules-object"}),"Rules Object")," section."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"messages")," parameter should be an object of error messages that need to be shown when a validation rule fails. The\nkeys of this object are data paths, and their values are ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#messages-object"}),"Validation Message")," strings. This parameter\nshould be used in order to define custom messages, It will try to use default error messages if you don't specify this\nparameter."),Object(i.b)("p",null,"If you set the ",Object(i.b)("inlineCode",{parentName:"p"},"generateNestedErrors")," parameter to ",Object(i.b)("inlineCode",{parentName:"p"},"true"),", It will create an object with the same structure of the\noriginal data, and puts the error messages on their exact place in the object structure. Otherwise, it will return a\nsimple object with data paths as keys and their errors as their values."),Object(i.b)("p",null,"Saying we have the following object as the user input, and we want to validate it."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const data = {\n    name: 'Ho$$ein Maktoobian',\n    phone: '+18885002321',\n    email: 'contacthmak.me',\n};\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import Validator from 'silvie/validator';\n\nconst val = new Validator(data, {\n    name: 'required|name',\n    phone: 'required|phone:en-US',\n    email: 'nullable|email'\n}, {\n    'name:required': 'You should enter your name',\n    'name:name': 'The name is not valid name',\n    'phone:required': 'You should enter your phone',\n    'phone:phone': 'Your phone is not a valida US phone number',\n    'email:email': 'Your email is not valid'\n});\n")),Object(i.b)("p",null,"Then it will parse the rules and validation messages and tries to validate all rules over their corresponding data. Then\nit will generate an error object which is accessible with ",Object(i.b)("inlineCode",{parentName:"p"},".errors")," on the validator instance. All of these steps will\nhappen in the constructor."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"if (val.hasErrors) {\n    console.log(val.errors);\n    // {\n    //     name: ['The name is not valid name'],\n    //     email: ['Your email is not valid'],\n    // }\n}\n")),Object(i.b)("h3",{id:"rules-object"},"Rules Object"),Object(i.b)("p",null,"The rules object is the object that defines what needs to be validated, and how it is going to be validated. You should\ndefine the path of the data as keys of the rules object. The values of those keys are rule strings as described below:"),Object(i.b)("p",null,"A rule string is a string with rule names separated with a pipe line character ",Object(i.b)("inlineCode",{parentName:"p"},"|"),". If a rule can accept parameters,\nthey can be specified by separating the parameters from the rule name with a colon character ",Object(i.b)("inlineCode",{parentName:"p"},":"),". Multiple parameters\ncan also be separated with a comma character ",Object(i.b)("inlineCode",{parentName:"p"},","),". "),Object(i.b)("p",null,"You can find a full list of available validation rules in ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/validation-rules"}),"Validation Rules")," section."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const rules = {\n    phone: 'requiredWithout:email|phone:en-US',\n    gender: 'required|in:Male,Female,Other'\n};\n")),Object(i.b)("h3",{id:"messages-object"},"Messages Object"),Object(i.b)("p",null,"Validation messages will be emitted into the errors object of the validator instance whenever a rule fails in validation.\nThere is a default validation message for all validation rules. If you don't want to get the default validation messages,\nyou can pass a third parameter to the validator constructor to use those validation messages for the failed rules."),Object(i.b)("p",null,"The keys of this object should be ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#path-strings"}),"path strings")," with a little difference at the end. You need to specify\nthe rule name separated by a colon character ",Object(i.b)("inlineCode",{parentName:"p"},":")," at the end the path."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const messages = {\n    'name:name': 'The name is not valid',\n    'friends.0.name:required': 'Your first friend name is missing',\n    'friends.*.name:name': 'One of your friends has an invalid name'\n};\n")),Object(i.b)("h4",{id:"custom-messages"},"Custom Messages"),Object(i.b)("p",null,"Validation messages should tell the issues about the data. It might be better to include some extra info into the error\nmessage. There are a few placeholders defined which can be replaced in a message."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},":path")," This will be the exact path of the matching data"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},":field")," This will be the path of the matching data"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},":name")," This will be last part of the path being the exact field name"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},":params")," This will be the array of params joined by a comma, and a white space ",Object(i.b)("inlineCode",{parentName:"li"},", ")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},":","[index]")," This will point to an index of parameters")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const messages = {\n    'friends.*.name:required': 'The \":path\" is not defined',\n    'gender:in': 'The gender should be one of: :params',\n};\n")),Object(i.b)("h3",{id:"path-strings"},"Path Strings"),Object(i.b)("p",null,"Data paths are ",Object(i.b)("inlineCode",{parentName:"p"},"strings")," that are defined as object keys in the validator ",Object(i.b)("inlineCode",{parentName:"p"},"errors")," or ",Object(i.b)("inlineCode",{parentName:"p"},"messages")," objects. A path is a\nstring separated with dots. Each part can be one of the following:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"key")," Key to reach members of an object like data"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"index")," Key to reach members of an array like data"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"wildcard")," Match everything in that path")),Object(i.b)("p",null,"All routes will be searched for from the root level of the main data object. Take a look at the following examples:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const rules = {\n    'parents.father.name': 'required|name',\n    'parents.*.name': 'required|name',\n    'friends': 'required|array',\n    'friends.0.age': 'required|numeric|min:18'\n};\n")),Object(i.b)("p",null,"The first one reaches the ",Object(i.b)("inlineCode",{parentName:"p"},"parents")," member and tries to find a ",Object(i.b)("inlineCode",{parentName:"p"},"father")," property on it, then it will look for the ",Object(i.b)("inlineCode",{parentName:"p"},"name"),"\nproperty.   "),Object(i.b)("p",null,"The second one will reach the ",Object(i.b)("inlineCode",{parentName:"p"},"parents")," property, and iterates over all its members, and looks for the ",Object(i.b)("inlineCode",{parentName:"p"},"name")," property\non each one of those members."),Object(i.b)("p",null,"The third one will just look for a member called ",Object(i.b)("inlineCode",{parentName:"p"},"friends")," in the root object."),Object(i.b)("p",null,"The fourth one will reach the ",Object(i.b)("inlineCode",{parentName:"p"},"friends")," property in the root object, then it will check for the ",Object(i.b)("inlineCode",{parentName:"p"},"age")," on the first entry\nof ",Object(i.b)("inlineCode",{parentName:"p"},"friends")," array."),Object(i.b)("p",null,"In all these three steps, searching will be cancelled if something is missing along the path."),Object(i.b)("h3",{id:"errors"},"Errors"),Object(i.b)("p",null,"After you've created a validator instance, the data will be validated against the rules object. If anything fails during\nthe validation, an error message will be added to the ",Object(i.b)("inlineCode",{parentName:"p"},"errors")," parameter of the validator instance. Also, another\nparameter ",Object(i.b)("inlineCode",{parentName:"p"},"hasErrors")," which will be ",Object(i.b)("inlineCode",{parentName:"p"},"true")," indicating if anything failed in validation."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"errors")," parameter is an object with the keys that matches the data names, and their values will be a ",Object(i.b)("inlineCode",{parentName:"p"},"string array"),"\nin case a data had more than one issue."))}b.isMDXComponent=!0},99:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return u}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=r.a.createContext({}),b=function(e){var t=r.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=b(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},h=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=b(a),h=n,u=p["".concat(o,".").concat(h)]||p[h]||d[h]||i;return a?r.a.createElement(u,l(l({ref:t},c),{},{components:a})):r.a.createElement(u,l({ref:t},c))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var c=2;c<i;c++)o[c]=a[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}h.displayName="MDXCreateElement"}}]);