(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{84:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return b})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return o}));var r=a(3),n=a(7),l=(a(0),a(99)),i={id:"database",title:"Database Helper",sidebar_label:"Database"},b={unversionedId:"database",id:"database",isDocsHomePage:!1,title:"Database Helper",description:"Silvie has a database helper to make it easier to communicate with your database. When you are working with raw database",source:"@site/docs\\database.md",slug:"/database",permalink:"/docs/database",editUrl:"https://github.com/silviejs/silviejs.github.io/tree/main/website/docs/database.md",version:"current",sidebar_label:"Database",sidebar:"docsSidebar",previous:{title:"GraphQL Server",permalink:"/docs/graphql"},next:{title:"Storage Helper",permalink:"/docs/storage"}},s=[{value:"Database",id:"database",children:[{value:"Select",id:"select",children:[]},{value:"Aggregate",id:"aggregate",children:[]},{value:"Insert",id:"insert",children:[]},{value:"Update",id:"update",children:[]},{value:"Delete",id:"delete",children:[]},{value:"Schema",id:"schema",children:[]},{value:"Other",id:"other",children:[]}]},{value:"Driver",id:"driver",children:[]}],c={rightToc:s};function o(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(l.b)("wrapper",Object(r.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"Silvie has a database helper to make it easier to communicate with your database. When you are working with raw database\nqueries you might end up with a hardly readable, maintainable and debuggable code. Also, there are some differences in\ndifferent DBMS SQL syntax. There are some packages out there that help with this. For example, you explain what you need\nto fetch from the database in Javascript and that library will execute a query and returns the results for you. "),Object(l.b)("p",null,"Silvie has a built-in database helper to handle this kind of problem. Database class is a singleton class which its\ninstance is accessible all over the application. You just need to import it from ",Object(l.b)("inlineCode",{parentName:"p"},"silvie/database"),"."),Object(l.b)("h2",{id:"database"},"Database"),Object(l.b)("p",null,"Database class is just a proxy class which delegates its responsibilities to its driver, in order to support various\ndatabase systems. For example, we create a MySQL driver and configure the database helper to use the MySQL driver. When\nthe application starts, database will initialize a singleton instance and its driver. Then when you want to do something\nwith the database, it will forward your request to the driver and returns the results."),Object(l.b)("h4",{id:"databasegetinstance"},"Database.getInstance()"),Object(l.b)("p",null,"This is a static method to return the pre built instance of the database class, for the sake of singleton pattern.\nHowever, you don't need to do this on your own, since the database module returns the database instance as its default\nexport, but you can access the ",Object(l.b)("inlineCode",{parentName:"p"},"Database")," class itself by importing it as a named export of database module. "),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"import { Database } from 'silvie/database';\n\nconst db = Database.getInstance();\n")),Object(l.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(l.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(l.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(l.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"In order to keep the code samples clean on this page, we are using sample variable name to demonstrate query builders.\nYou can learn more about writing query builders in ",Object(l.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/query-builders"}),"Query Builders")," section."))),Object(l.b)("h4",{id:"databaseinit"},"database.init()"),Object(l.b)("p",null,"The init method is responsible to initialize the driver by passing the configurations to its constructor. This method\nwill run automatically when Silvie starts. You don't usually need to run this on your own. This will update the database\ninstance and its driver."),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"database.init();\n")),Object(l.b)("h3",{id:"select"},"Select"),Object(l.b)("h4",{id:"databaseselect"},"database.select()"),Object(l.b)("p",null,"This method will be used to select some records from the database. It accepts a query builder and returns a promise to\nhandle the response. Response will be an ",Object(l.b)("inlineCode",{parentName:"p"},"array of record objects"),"."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"queryBuilder")," ",Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/query-builders"}),"<QueryBuilder",">")," ")),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"const users = await database.select(usersQueryBuilder);\n")),Object(l.b)("h4",{id:"databaseexists"},"database.exists()"),Object(l.b)("p",null,"This method will check weather any record with the conditions defined in a query builder exist or not. This method will\naccept a query builder and returns a ",Object(l.b)("inlineCode",{parentName:"p"},"boolean")," as the response. "),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"queryBuilder")," ",Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/query-builders"}),"<QueryBuilder",">"))),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"const userHasLisence = await database.exists(userLisenceQueryBuilder);\n")),Object(l.b)("h3",{id:"aggregate"},"Aggregate"),Object(l.b)("h4",{id:"databasecount"},"database.count()"),Object(l.b)("p",null,"This method will return the ",Object(l.b)("inlineCode",{parentName:"p"},"number")," of records that a query builder points to. "),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"queryBuilder")," ",Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/query-builders"}),"<QueryBuilder",">")," ")),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"const postsCount = await database.count(postsQueryBuilder);\n")),Object(l.b)("h4",{id:"databaseaverage"},"database.average()"),Object(l.b)("p",null,"This method will get the average value of a column in all records that the query builder points to, and returns a\n",Object(l.b)("inlineCode",{parentName:"p"},"number")," as the result."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"queryBuilder")," ",Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/query-builders"}),"<QueryBuilder",">")," "),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"column")," ",Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"}),"<string",">"))),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"const postAverageRating = await database.average(postRatingsQueryBuilder, 'rating');\n")),Object(l.b)("h4",{id:"databasesum"},"database.sum()"),Object(l.b)("p",null,"This method will return a ",Object(l.b)("inlineCode",{parentName:"p"},"number")," as the summation of a column in all records that the query builder points to."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"queryBuilder")," ",Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/query-builders"}),"<QueryBuilder",">")," "),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"column")," ",Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"}),"<string",">"))),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"const totalDonations = await database.sum(donationsQueryBuilder, 'price_paid');\n")),Object(l.b)("h4",{id:"databasemin"},"database.min()"),Object(l.b)("p",null,"This method will return the minimum value of a column in the query builder's records. The return value may vary\ndepending on the type of the column."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"queryBuilder")," ",Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/query-builders"}),"<QueryBuilder",">")," "),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"column")," ",Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"}),"<string",">")," ")),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"const minimumUsersAge = await database.min(usersQueryBuilder, 'age');\n")),Object(l.b)("h4",{id:"databasemax"},"database.max()"),Object(l.b)("p",null,"This method will return the maximum value of a column in the query builder's records. The return value may vary\ndepending on the type of the column."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"queryBuilder")," ",Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/query-builders"}),"<QueryBuilder",">")," "),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"column")," ",Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"}),"<string",">")," ")),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"const maximumDonation = await database.min(donationsQueryBuilder, 'amount');\n")),Object(l.b)("h3",{id:"insert"},"Insert"),Object(l.b)("h4",{id:"databaseinsert"},"database.insert()"),Object(l.b)("p",null,"This method will insert data to a table. The table and the data will be defined in the query builder."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"queryBuilder")," ",Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/query-builders"}),"<QueryBuilder",">"))),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"const result = await database.insert(newCategoriesQueryBuilder);\n")),Object(l.b)("h3",{id:"update"},"Update"),Object(l.b)("h4",{id:"databaseupdate"},"database.update()"),Object(l.b)("p",null,"This method will update the records of a table. The update table, conditions and data will be defined in the query\nbuilder."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"queryBuilder")," ",Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/query-builders"}),"<QueryBuilder",">"))),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"const result = await database.update(updateUserProfileQueryBuilder);\n")),Object(l.b)("h4",{id:"databasebulkupdate"},"database.bulkUpdate()"),Object(l.b)("p",null,"The bulk update will be used to update different records with different data. You need to build a query builder for that\npurpose and pass it to this method. "),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"queryBuilder")," ",Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/query-builders"}),"<QueryBuilder",">"))),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"const result = await database.bulkUpdate(updateEditorsBalanceQueryBuilder);\n")),Object(l.b)("h3",{id:"delete"},"Delete"),Object(l.b)("h4",{id:"databasedelete"},"database.delete()"),Object(l.b)("p",null,"This method will delete records from the database. The condition to find the records will be defined in the query\nbuilder."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"queryBuilder")," ",Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/query-builders"}),"<QueryBuilder",">"))),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"const result = await database.delete(deleteUserAccountQueryBuilder);\n")),Object(l.b)("h4",{id:"databasesoftdelete"},"database.softDelete()"),Object(l.b)("p",null,"This method will soft delete records in the database. Soft delete is a technique used to mark database records as\ndeleted. This technique usually uses an additional column in that table. In silvie this record is ",Object(l.b)("inlineCode",{parentName:"p"},"deleted_at")," which is\na timestamp. You can learn more about soft deletes in ",Object(l.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/migrations#soft-deletes"}),"Soft Deletes part of Migrations")," section.   "),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"queryBuilder")," ",Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/query-builders"}),"<QueryBuilder",">"))),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"const result = await database.softDelete(deleteUserCommentQueryBuilder);\n")),Object(l.b)("h4",{id:"databaserestore"},"database.restore()"),Object(l.b)("p",null,"This method will restore soft deleted records, by nullifying their soft delete column."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"queryBuilder")," ",Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/query-builders"}),"<QueryBuilder",">"))),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"const result = await database.restore(undeleteUserCommentQueryBuilder);\n")),Object(l.b)("h3",{id:"schema"},"Schema"),Object(l.b)("h4",{id:"databasecreatetable"},"database.createTable()"),Object(l.b)("p",null,"This method will create a table with the given table definition. A table definition contains all columns and constraints\nof a table. To learn more about tables, read ",Object(l.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/migrations#table"}),"Table part of Migrations")," section."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"table")," ",Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/migrations#table"}),"<Table",">")," ")),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"const result = await database.createTable(employeesTable);\n")),Object(l.b)("h4",{id:"databasetruncatetable"},"database.truncateTable()"),Object(l.b)("p",null,"This method will delete all records from a table, and resets the auto increment value to its default."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"tableName")," ",Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"}),"<string",">"))),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"const result = await database.truncateTable('logs');\n")),Object(l.b)("h4",{id:"databasedroptable"},"database.dropTable()"),Object(l.b)("p",null,"This method will delete a table from the database. It will throw an error if the table does not exist."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"tableName")," ",Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"}),"<string",">"))),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"const result = await database.dropTable('visits');\n")),Object(l.b)("h4",{id:"databasedroptableifexists"},"database.dropTableIfExists()"),Object(l.b)("p",null,"This method will delete a table from the database if that table exists."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"tableName")," ",Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"}),"<string",">"))),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"const result = await database.dropTableIfExists('logs');\n")),Object(l.b)("h3",{id:"other"},"Other"),Object(l.b)("h4",{id:"databaseraw"},"database.raw()"),Object(l.b)("p",null,"This method executes a raw query on the database. This method is only working for those databases working with\nstructured query languages ",Object(l.b)("em",{parentName:"p"},"(aka SQL)"),". The raw method takes a query as its first parameter which is a string, and a\nparameter array which will bind into the query parameter placeholders. By default, the parameters option is an empty\narray."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"query")," ",Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"}),"<string",">")," "),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"params")," ",Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"}),"<Array",">"))),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"const users = await database.raw('SELECT * FROM `users`');\n// This will return all user records\n\nconst user = await database.raw('SELECT * FROM `post` WHERE id = ?', [ 22 ]);\n// This will return the record for a post \n// where its id is 22\n\nconst result = await database.raw('ALTER TABLE `users` ADD COLUMN `username` AFTER `name`');\n// This will add a 'username' column \n// after the 'name' column of 'users' table\n")),Object(l.b)("h4",{id:"databasecheckforeignkeys"},"database.checkForeignKeys()"),Object(l.b)("p",null,"This method will specify weather to care for foreign key constraints or not. Foreign keys might cause problems when we\nare trying to create a table, update records or insert data into a table. "),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"state")," ",Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"}),"<string",">"))),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"await database.checkForeignKeys(true);\n// Enables the foreign key checks\n\nawait database.checkForeignKeys(false);\n// Disables the foreign key checks\n")),Object(l.b)("p",null,"There are two alias methods for this method, with a more meaningful name to enable/disable foreign key checks in a\ndatabase. These methods don't take any parameters."),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"await database.enableForeignKeyChecks();\n// and\nawait database.disableForeignKeyChecks();\n")),Object(l.b)("h4",{id:"databasecloseconnection"},"database.closeConnection()"),Object(l.b)("p",null,"This method will close the underlying database connection."),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"database.closeConnection();\n")),Object(l.b)("h2",{id:"driver"},"Driver"),Object(l.b)("p",null,"A database driver needs to handle the communication with its corresponding database system. Currently, Silvie only\nsupports ",Object(l.b)("inlineCode",{parentName:"p"},"mysql"),"."),Object(l.b)("p",null,"A driver needs to handle these responsibilities."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Initiate a connection to the database"),Object(l.b)("li",{parentName:"ul"},"Interpret commands into actual queries"),Object(l.b)("li",{parentName:"ul"},"Implement all methods required by the database class"),Object(l.b)("li",{parentName:"ul"},"Execute queries on the database and return the results"),Object(l.b)("li",{parentName:"ul"},"Close the connection to the database")),Object(l.b)("p",null,"The database driver needs to implement the core functionality for all methods mentioned above. Because the database\nclass forwards everything to its driver."))}o.isMDXComponent=!0},99:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return m}));var r=a(0),n=a.n(r);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function b(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=n.a.createContext({}),o=function(e){var t=n.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):b(b({},t),e)),a},d=function(e){var t=o(e.components);return n.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},p=n.a.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=o(a),p=r,m=d["".concat(i,".").concat(p)]||d[p]||u[p]||l;return a?n.a.createElement(m,b(b({ref:t},c),{},{components:a})):n.a.createElement(m,b({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=p;var b={};for(var s in t)hasOwnProperty.call(t,s)&&(b[s]=t[s]);b.originalType=e,b.mdxType="string"==typeof e?e:r,i[1]=b;for(var c=2;c<l;c++)i[c]=a[c];return n.a.createElement.apply(null,i)}return n.a.createElement.apply(null,a)}p.displayName="MDXCreateElement"}}]);