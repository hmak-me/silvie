(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{88:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return c}));var r=n(3),a=n(7),i=(n(0),n(99)),s={id:"seeders",title:"Seeders"},o={unversionedId:"seeders",id:"seeders",isDocsHomePage:!1,title:"Seeders",description:"Database seeders will be used to seed the database with some initial data. Database seeders need to be run when you are",source:"@site/docs/seeders.md",slug:"/seeders",permalink:"/docs/seeders",editUrl:"https://github.com/silviejs/silviejs.github.io/tree/main/website/docs/seeders.md",version:"current",sidebar:"docsSidebar",previous:{title:"Migrations",permalink:"/docs/migrations"},next:{title:"Query Builders",permalink:"/docs/query-builders"}},l=[{value:"Seeder",id:"seeder",children:[]},{value:"Create new Seeder",id:"create-new-seeder",children:[]},{value:"Writing Seeders",id:"writing-seeders",children:[{value:"Using Models",id:"using-models",children:[]},{value:"Using Database",id:"using-database",children:[]}]}],d={rightToc:l};function c(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Database seeders will be used to seed the database with some initial data. Database seeders need to be run when you are\ninitializing your database, just after you run your migrations."),Object(i.b)("h2",{id:"seeder"},"Seeder"),Object(i.b)("p",null,"A seeder is just a class which implements ",Object(i.b)("inlineCode",{parentName:"p"},"ISeeder")," interface. ISeeder makes the class implement a method called\n",Object(i.b)("inlineCode",{parentName:"p"},"seed()")," which will be run when you ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/cli#seed"}),"run your seeder through the CLI"),"."),Object(i.b)("p",null,"There is also an ",Object(i.b)("inlineCode",{parentName:"p"},"order")," static property which indicates the order of seeder execution. This will be used when you are\nrunning all your migrations all at once. If you don't define this property, Silvie takes ",Object(i.b)("inlineCode",{parentName:"p"},"0")," as its default value and\nmay result in an unexpected behavior when you run all your migrations. So it is recommended to define this static\nproperty with a proper value. "),Object(i.b)("h2",{id:"create-new-seeder"},"Create new Seeder"),Object(i.b)("p",null,"You can create a seeder manually or by ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/cli#make"}),"using the make command of Silvie CLI"),". The following command will\ncreate a ",Object(i.b)("inlineCode",{parentName:"p"},"roles.ts")," file in ",Object(i.b)("inlineCode",{parentName:"p"},"src/database/seeders"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"silvie make seeder roles\n")),Object(i.b)("p",null,"Note that you can use this command along with other entity makers. The following command will create a ",Object(i.b)("inlineCode",{parentName:"p"},"Role")," model, a\n",Object(i.b)("inlineCode",{parentName:"p"},"roles")," migration and a ",Object(i.b)("inlineCode",{parentName:"p"},"roles")," seeder."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"silvie make model Role -mS\n")),Object(i.b)("h2",{id:"writing-seeders"},"Writing Seeders"),Object(i.b)("p",null,"After you created a seeder class and organized its order, You need to do the seeding job in the ",Object(i.b)("inlineCode",{parentName:"p"},"seed()")," method. You can\neither create your data with your models or insert them manually with raw database commands. An empty database seeder\nwill look like this:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"import ISeeder from 'silvie/database/migration/seeder';\n\nexport default class RolesTableSeeder implements ISeeder {\n    static order = 1;\n\n    async seed() {\n        // Seed the table here\n    }\n};\n")),Object(i.b)("h3",{id:"using-models"},"Using Models"),Object(i.b)("p",null,"Your models can be imported into the seeders to ease the seeding process. Here is an example of the ",Object(i.b)("inlineCode",{parentName:"p"},"roles")," which uses\nthe ",Object(i.b)("inlineCode",{parentName:"p"},"Role")," model."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"import ISeeder from 'silvie/database/migration/seeder';\nimport Role from 'models/role';\n\nexport default class RolesTableSeeder implements ISeeder {\n    static order = 1;\n\n    async seed() {\n        await Role.insert([\n            { name: 'Admin' },\n            { name: 'Maintainer' },\n            { name: 'Editor' },\n            { name: 'Author' }\n        ]);\n    }\n};\n")),Object(i.b)("p",null,"This example will create 4 roles in the database."),Object(i.b)("h3",{id:"using-database"},"Using Database"),Object(i.b)("p",null,"You can also use the ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/database#databaseraw"}),"database helper"),". The above example with raw MySQL queries will be like\nthis:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"import ISeeder from 'silvie/database/migration/seeder';\nimport Database from 'silvie/database';\n\nexport default class RolesTableSeeder implements ISeeder {\n    static order = 1;\n\n    async seed() {\n        await Database.raw(\n            'INSERT INTO `roles`(`name`) VALUES (?), (?), (?), (?)', \n            [\n                'Admin',\n                'Maintainer',\n                'Editor',\n                'Author'\n            ]\n        );\n    }\n};\n")),Object(i.b)("p",null,"The result will be same as the previous example."))}c.isMDXComponent=!0},99:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=a.a.createContext({}),c=function(e){var t=a.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},b=function(e){var t=c(e.components);return a.a.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),b=c(n),u=r,m=b["".concat(s,".").concat(u)]||b[u]||p[u]||i;return n?a.a.createElement(m,o(o({ref:t},d),{},{components:n})):a.a.createElement(m,o({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var d=2;d<i;d++)s[d]=n[d];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);