(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{55:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return o})),n.d(t,"default",(function(){return s}));var a=n(2),i=(n(0),n(92));const r={id:"cli",title:"Silvie CLI",sidebar_label:"CLI"},l={unversionedId:"cli",id:"cli",isDocsHomePage:!1,title:"Silvie CLI",description:"Silvie comes with a CLI command which automates some handy routines for you. Silvie CLI only works from a project root.",source:"@site/docs/cli.md",slug:"/cli",permalink:"/docs/cli",editUrl:"https://github.com/silviejs/silviejs.github.io/tree/main/website/docs/cli.md",version:"current",sidebar_label:"CLI",sidebar:"docsSidebar",previous:{title:"Configuration",permalink:"/docs/configuration"},next:{title:"HTTP Server",permalink:"/docs/http"}},o=[{value:"Build",id:"build",children:[]},{value:"Bundle",id:"bundle",children:[]},{value:"Check",id:"check",children:[]},{value:"Dev",id:"dev",children:[]},{value:"Fix",id:"fix",children:[]},{value:"Help",id:"help",children:[]},{value:"Make",id:"make",children:[]},{value:"Migrate",id:"migrate",children:[]},{value:"Seed",id:"seed",children:[]},{value:"Start",id:"start",children:[]},{value:"Test",id:"test",children:[]}],c={rightToc:o};function s({components:e,...t}){return Object(i.b)("wrapper",Object(a.a)({},c,t,{components:e,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Silvie comes with a CLI command which automates some handy routines for you. Silvie CLI only works from a project root.\nA project root is a directory with a valid ",Object(i.b)("inlineCode",{parentName:"p"},"package.json")," file and ",Object(i.b)("inlineCode",{parentName:"p"},"silvie package")," installed as a project dependency."),Object(i.b)("p",null,"Whenever silvie installs in a node project, npm will automatically create a symbolic link to the CLI, so it will be\naccessible from your project directory."),Object(i.b)("h2",{id:"build"},"Build"),Object(i.b)("p",null,"Build command will take all of your source files and pipes them through babel to transpile them into Node.js\ncompatible equivalent files. The directory structure will be kept as is, and any other files that are not source files,\nwill be copied into the build folder."),Object(i.b)("p",null,"The result will be a ",Object(i.b)("inlineCode",{parentName:"p"},"build directory")," in the project root, which contains compiled source files. Along with the source\nfiles this command will also copy the ",Object(i.b)("inlineCode",{parentName:"p"},".env")," file into the build directory."),Object(i.b)("p",null,"Note that before starting to build the project, it will automatically clear the build directory."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"silvie build\n")),Object(i.b)("h2",{id:"bundle"},"Bundle"),Object(i.b)("p",null,"Bundle command will take building of your project to a next level. It uses webpack to process your project from its\nentry point which is ",Object(i.b)("inlineCode",{parentName:"p"},"src/bootstrap/index.ts")," and compiles all source files through a babel loader, transpile GraphQL\nfiles into their javascript notation and bundles all of them together into a minified and uglified file. It also injects\nthe variables of ",Object(i.b)("inlineCode",{parentName:"p"},".env")," file into the output file."),Object(i.b)("p",null,"The result will be a ",Object(i.b)("inlineCode",{parentName:"p"},"bundle directory")," which contains a single ",Object(i.b)("strong",{parentName:"p"},"index.js")," file, and the assets directory which will\nbe copied during the bundling process."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"silvie bundle\n")),Object(i.b)("h2",{id:"check"},"Check"),Object(i.b)("p",null,"Check command will come to help whenever something is broken in the project. This command will check to see if a file or\ndirectory is missing from the project files, and report with the missing directories and file names."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"silvie check\n")),Object(i.b)("h2",{id:"dev"},"Dev"),Object(i.b)("p",null,"Dev command will run your application in the development mode. Which will watch the project source directory for changes\nand rerun the application when something changes. This command will transpile your typescript files on the fly, so you\nwon't see an output directory when you run this command. It also has to be mentioned that when you run the project in\ndevelopment mode, Silvie will create a ",Object(i.b)("inlineCode",{parentName:"p"},".silvie")," directory in the projects root. You can read more about this, in the\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/directory-structure#silvie"}),".silvie Directory")," section."),Object(i.b)("h4",{id:"--port--p"},"--port, -p"),Object(i.b)("p",null,"You can specify a port number by passing this option."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"silvie dev\n# Run the application on the port in config files or the default port\n\nsilvie dev --port 8080\n# Run the application on port 8080\n")),Object(i.b)("h2",{id:"fix"},"Fix"),Object(i.b)("p",null,"Fix command is a helper command to check your project structure. This command will create the missing base directories\nand files, such as configuration files, bootstrap file, .env file or tsconfig.json file."),Object(i.b)("p",null,"It wil also checks the required variables in ",Object(i.b)("inlineCode",{parentName:"p"},".env")," file, adds the missing variables and fills the empty variables with\ntheir default recommended value."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"silvie fix\n")),Object(i.b)("h2",{id:"help"},"Help"),Object(i.b)("p",null,"Help command will help you if you need more help with the CLI. If you need help with a specific command, you should just\npass the name of that command, and it will show you the help text for that command. Otherwise, it will show you the list\nof all supported commands."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"silvie help\n# Shows the list of CLI commands\n\nsilvie help migrate\n# Shows the migration command help text\n")),Object(i.b)("h2",{id:"make"},"Make"),Object(i.b)("p",null,"This file becomes more handy when your project is growing, and you need to build a lot of files. The make command will\nhelp you to create common files from their predefined templates. Here is the list of supported files, which can be made\nusing this command."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"controller")," - HTTP Controller"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"dataloader"),Object(i.b)("sup",null,"[E]")," - GraphQL Data Loader "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"middleware")," - HTTP Middleware"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"migration"),Object(i.b)("sup",null,"[E]")," - Database Migration"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"model"),Object(i.b)("sup",null,"[E]")," - Model Entity"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"resolver"),Object(i.b)("sup",null,"[E]")," - GraphQL Resolver"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"schema"),Object(i.b)("sup",null,"[E]")," - GraphQL Schema"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"seeder"),Object(i.b)("sup",null,"[E]")," - Database Seeder"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"test")," - Unit Test File")),Object(i.b)("p",null,"You may notice that some of these items has an ",Object(i.b)("strong",{parentName:"p"},"[E]")," tag. These kinds of files are entity files. Which will create an\nentity in your project. When you are making one of these kinds, you can create others along with it, in a single command\nby passing these options to the make command:"),Object(i.b)("h4",{id:"--model--m"},"--model, -M"),Object(i.b)("p",null,"Create a model for that entity."),Object(i.b)("h4",{id:"--migration--m"},"--migration, -m"),Object(i.b)("p",null,"Create a migration for that entity."),Object(i.b)("h4",{id:"--resolver--r"},"--resolver, -r"),Object(i.b)("p",null,"Create a resolver for that entity."),Object(i.b)("h4",{id:"--seeder--s"},"--seeder, -S"),Object(i.b)("p",null,"Create a seeder for that entity."),Object(i.b)("h4",{id:"--schema--s"},"--schema, -s"),Object(i.b)("p",null,"Create a schema for that entity."),Object(i.b)("h4",{id:"--dataloader--d"},"--dataloader, -d"),Object(i.b)("p",null,"Create a data loader for that entity."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"silvie make controller PostsController\n# Creates a controller named 'PostsController'\n\nsilvie make model User -msr\n# Creates a model named 'User' along with its migration, schema and resolver\n\nsilvie make resolver user -M --schema --dataloader\n# Creates a user resolver along with its model, schema and data loader \n")),Object(i.b)("h2",{id:"migrate"},"Migrate"),Object(i.b)("p",null,"Migrate command will help you to build your database schemas one by one or all at once. If you specify a migration name,\nit will use that specific migration file to do the job. Migration name is the filename of that migration without\nextension. Otherwise, It will process all migration files. To learn more about migrations, read the\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/migrations"}),"Database Migration")," section."),Object(i.b)("p",null,"By default, this command will only tries to migrate",Object(i.b)("em",{parentName:"p"},"(create)")," the schemas. You can change this behavior by specifying\none of these options:"),Object(i.b)("h4",{id:"--rollback"},"--rollback"),Object(i.b)("p",null,"This will rollback",Object(i.b)("em",{parentName:"p"},"(delete)")," the migrations."),Object(i.b)("h4",{id:"--refresh"},"--refresh"),Object(i.b)("p",null,"This option will first, rollback a migration and then tries to create it again."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"silvie migrate\n# This will migrate all of your schemas\n\nsilvie migrate users --refresh\n# This will rollback and migrate the users migration\n")),Object(i.b)("h2",{id:"seed"},"Seed"),Object(i.b)("p",null,"Seed command will run your database seeders. You can specify the seeder name as you could in migrate command. You just\nneed to specify the seeder name for the command in order to run a single seeder. The seeder name is its filename without\nextension. To learn more about seeders, read the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/seeders"}),"Database Seeder")," section."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"silvie seed\n# This will run all database seeders\n\nsilvie seed users\n# This will only run the users seeder\n")),Object(i.b)("h2",{id:"start"},"Start"),Object(i.b)("p",null,"Start command will start the application from the build folder. If you run this command without having a successful\nbuild of your application, You will see an error message, saying what the problem is with your build."),Object(i.b)("h4",{id:"--port--p-1"},"--port, -p"),Object(i.b)("p",null,"You can specify a port number by passing this option."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"silvie dev\n# Run the application on the port in config files or the default port\n\nsilvie dev --port 8080\n# Run the application on port 8080\n")),Object(i.b)("h2",{id:"test"},"Test"),Object(i.b)("p",null,"Test command will run all your test files and shows the results at the end. It is configured to search for any file\nending with ",Object(i.b)("inlineCode",{parentName:"p"},".test.ts")," or ",Object(i.b)("inlineCode",{parentName:"p"},".test.js"),". Location of test files can be anywhere in your project."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"silvie test\n")))}s.isMDXComponent=!0},92:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),b=function(e){var t=i.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=b(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=b(n),u=a,m=d["".concat(l,".").concat(u)]||d[u]||p[u]||r;return n?i.a.createElement(m,o(o({ref:t},s),{},{components:n})):i.a.createElement(m,o({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<r;s++)l[s]=n[s];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);