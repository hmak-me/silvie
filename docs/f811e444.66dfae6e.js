(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{87:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return o})),r.d(t,"metadata",(function(){return l})),r.d(t,"rightToc",(function(){return i})),r.d(t,"default",(function(){return c}));var n=r(2),a=(r(0),r(92));const o={id:"routing",title:"Routing"},l={unversionedId:"routing",id:"routing",isDocsHomePage:!1,title:"Routing",description:"Routing is one of the main concepts in back-end development. It is how we set addresses for our API endpoints. Silvie",source:"@site/docs/routing.md",slug:"/routing",permalink:"/docs/routing",editUrl:"https://github.com/silviejs/silviejs.github.io/tree/main/website/docs/routing.md",version:"current",sidebar:"docsSidebar",previous:{title:"Storage Helper",permalink:"/docs/storage"},next:{title:"Controllers",permalink:"/docs/controllers"}},i=[{value:"Route Decorator",id:"route-decorator",children:[]},{value:"HTTP Methods",id:"http-methods",children:[]},{value:"Routes",id:"routes",children:[{value:"Basic",id:"basic",children:[]},{value:"Wildcard",id:"wildcard",children:[]},{value:"Regular Expression",id:"regular-expression",children:[]}]},{value:"Route Parameters",id:"route-parameters",children:[{value:"Basic",id:"basic-1",children:[]},{value:"Optional",id:"optional",children:[]},{value:"Regular Expression",id:"regular-expression-1",children:[]}]}],s={rightToc:i};function c({components:e,...t}){return Object(a.b)("wrapper",Object(n.a)({},s,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Routing is one of the main concepts in back-end development. It is how we set addresses for our API endpoints. Silvie\nutilizes the power of ",Object(a.b)("inlineCode",{parentName:"p"},"Method Decorators")," to set an address for a method in a controller. This is meant to be as simple\nas possible."),Object(a.b)("h2",{id:"route-decorator"},"Route Decorator"),Object(a.b)("p",null,"Route decorator is how you define your routes and attach them to your request handlers. It can be imported from the main\ncontroller file located at ",Object(a.b)("inlineCode",{parentName:"p"},"silvie/lib/http/controller"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import Controller, { route } from 'silvie/lib/http/controller';\n")),Object(a.b)("p",null,"The route decorator will take two parameters:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"method")," ",Object(a.b)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"}),"<string",">")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"url")," ",Object(a.b)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type"}),"<string",">")," |\n",Object(a.b)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"}),"<RegExp",">"))),Object(a.b)("p",null,"The method needs to be a string with the name of one of the methods mentioned in ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"#http-methods"}),"HTTP Methods"),"."),Object(a.b)("p",null,"As you may already know, the decorators are some functions written before something to add a functionality to it, and\nthey are marked with ",Object(a.b)("inlineCode",{parentName:"p"},"@"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import Controller, { route } from 'silvie/lib/http/controller';\n\nexport default class GreetingController implements Controller {\n    @route('GET', '/say-hi')\n    greeter(req: any, res: any): void {\n        res.send('Hello From Silvie');\n    }\n}\n")),Object(a.b)("p",null,"The above code sample will attach the ",Object(a.b)("inlineCode",{parentName:"p"},"greeter")," method of ",Object(a.b)("inlineCode",{parentName:"p"},"GreetingController")," class to a ",Object(a.b)("inlineCode",{parentName:"p"},"/say-hi")," URL accessible by\nusing the ",Object(a.b)("inlineCode",{parentName:"p"},"GET")," method."),Object(a.b)("h2",{id:"http-methods"},"HTTP Methods"),Object(a.b)("p",null,"Silvie has an underlying express server to handle HTTP requests. Therefore, the available HTTP verbs are:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Official Verbs"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"DELETE"),Object(a.b)("li",{parentName:"ul"},"GET"),Object(a.b)("li",{parentName:"ul"},"HEAD"),Object(a.b)("li",{parentName:"ul"},"OPTIONS"),Object(a.b)("li",{parentName:"ul"},"PATCH"),Object(a.b)("li",{parentName:"ul"},"POST"),Object(a.b)("li",{parentName:"ul"},"PUT"),Object(a.b)("li",{parentName:"ul"},"TRACE"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Unofficial Verbs"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"CHECKOUT"),Object(a.b)("li",{parentName:"ul"},"COPY"),Object(a.b)("li",{parentName:"ul"},"LOCK"),Object(a.b)("li",{parentName:"ul"},"M-SEARCH"),Object(a.b)("li",{parentName:"ul"},"MERGE"),Object(a.b)("li",{parentName:"ul"},"MKACTIVITY"),Object(a.b)("li",{parentName:"ul"},"MKCOL"),Object(a.b)("li",{parentName:"ul"},"MOVE"),Object(a.b)("li",{parentName:"ul"},"NOTIFY"),Object(a.b)("li",{parentName:"ul"},"PURGE"),Object(a.b)("li",{parentName:"ul"},"REPORT"),Object(a.b)("li",{parentName:"ul"},"SEARCH"),Object(a.b)("li",{parentName:"ul"},"SUBSCRIBE"),Object(a.b)("li",{parentName:"ul"},"UNLOCK"),Object(a.b)("li",{parentName:"ul"},"UNSUBSCRIBE")))),Object(a.b)("p",null,"There is also an ",Object(a.b)("inlineCode",{parentName:"p"},"ALL")," method, which can be used to respond to all request types from a request handler. It is just like\nyou mount a middleware on that specific path. So there won't be a specific HTTP Verb attached to your request handler."),Object(a.b)("p",null,"Note that all verbs mentioned above can also be used in lowercase, or any other case you may like. They will convert to\nlowercase when they are being registered."),Object(a.b)("h2",{id:"routes"},"Routes"),Object(a.b)("h3",{id:"basic"},"Basic"),Object(a.b)("p",null,"Basic Routes are some usual URLs without any parameters."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import Controller, { route } from 'silvie/lib/http/controller';\nimport Book from 'models/book';\n\nexport default class BooksController implements Controller {\n    @route('PUT', '/books/sci-fi')\n    async getBook(req: any, res: any): void {\n        const book = await Book.create({\n            title: req.body.title\n        });\n\n        res.send(book);\n    }\n    // Matches PUT on /books/sci-fi\n}\n")),Object(a.b)("h3",{id:"wildcard"},"Wildcard"),Object(a.b)("p",null,"Wildcard routes add more flexibility to your application routes. "),Object(a.b)("h4",{id:""},"?"),Object(a.b)("p",null,"Using a question mark after a character or after a group of characters will make that part optional."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"@route('GET', '/hello?')\n// Matches  /hell  /hello\n\n@route('GET', '/h(el)?lo')\n// Matches  /hlo  /hello\n")),Object(a.b)("h4",{id:"-1"},"+"),Object(a.b)("p",null,"Using a plus sign after a character, will match URLs containing one or more of that character there."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"@route('GET', '/hello+')\n// Matches  /hello  /helloo  /hellooooo\n\n@route('GET', '/hel+o')\n// Matches  /helo  /hello  /hellllo\n")),Object(a.b)("h4",{id:"-2"},"*"),Object(a.b)("p",null,"Using an astrix sign after a character, will match URLs containing zero or more of that character there."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"@route('GET', '/hel*o')\n// Matches  /heo  /helo /hellllo\n\n@route('GET', '/hello*')\n// Matches  /hell  /hello  /hellooooo\n")),Object(a.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(a.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(a.b)("h5",{parentName:"div"},Object(a.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(a.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(a.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(a.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(a.b)("p",{parentName:"div"},"Note that unlike the ",Object(a.b)("inlineCode",{parentName:"p"},"?")," operator, ",Object(a.b)("inlineCode",{parentName:"p"},"+")," and ",Object(a.b)("inlineCode",{parentName:"p"},"*")," won't work for character groups."))),Object(a.b)("p",null,"There is also another usage of ",Object(a.b)("inlineCode",{parentName:"p"},"*")," operator which you can wildcard the whole route. This can be done by putting an\nastrix sign at the end of a routes trailing slash. The wildcard path that was matched using the ",Object(a.b)("inlineCode",{parentName:"p"},"*")," sign, will be\naccessible by ",Object(a.b)("inlineCode",{parentName:"p"},"req.params[0]"),";"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import Controller, { route } from 'silvie/lib/http/controller';\n\nexport default class BooksController implements Controller {\n    @route('GET', '/files/*')\n    async getBook(req: any, res: any): void {\n        console.log(req.params[0])\n\n        res.send('Files Wildcard URL');\n    }\n    // Matches  /files/images  /files/images/avatar.png\n}\n")),Object(a.b)("h3",{id:"regular-expression"},"Regular Expression"),Object(a.b)("p",null,"You may pass a regular expression as the url to the route decorator for handling more advanced routes."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import Controller, { route } from 'silvie/lib/http/controller';\n\nexport default class BooksController implements Controller {\n    @route('GET', /.*er$/)\n    async getBook(req: any, res: any): void {\n        res.send('Say hello to Regular Expressions');\n    }\n    // Matches  /er  /commander  /servicer/printer\n}\n")),Object(a.b)("h2",{id:"route-parameters"},"Route Parameters"),Object(a.b)("p",null,"It is sometimes necessary to define parameters in the URL. There are multiple types of parameters which you can specify\nin a URL string."),Object(a.b)("h3",{id:"basic-1"},"Basic"),Object(a.b)("p",null,"A basic route parameters is a name identified with a ",Object(a.b)("inlineCode",{parentName:"p"},":")," prefix."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import Controller, { route } from 'silvie/lib/http/controller';\nimport Post from 'models/post';\n\nexport default class PostsController implements Controller {\n    @route('GET', '/posts/:postId')\n    async getPost(req: any, res: any): void {\n        const post = await Post.find(req.params.postId);\n\n        res.send(post);\n    }\n    // Matches  /posts/123  /posts/silvie-612\n}\n")),Object(a.b)("h3",{id:"optional"},"Optional"),Object(a.b)("p",null,"You can make it optional with ",Object(a.b)("inlineCode",{parentName:"p"},"?")," sign after the parameter name."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import Controller, { route } from 'silvie/lib/http/controller';\nimport Post from 'models/post';\n\nexport default class PostsController implements Controller {\n    @route('GET', '/posts/:postId?')\n    async getPost(req: any, res: any): void {\n        let data = null;\n\n        if (req.params.postId) {\n            data = await Post.find(req.params.postId);\n        } else {\n            data = await Post.all();\n        }\n\n        res.send(data);\n    }\n    // Matches  /posts  /posts/561  /posts/silvie-article\n}\n")),Object(a.b)("p",null,"It there was a ",Object(a.b)("inlineCode",{parentName:"p"},"postId")," parameter in the url, will return with a post with a specific id. Otherwise, it will return all\nposts as the result."),Object(a.b)("h3",{id:"regular-expression-1"},"Regular Expression"),Object(a.b)("p",null,"You may also need more control over the parameters you define in the URL. So you can append a regular expression wrapped\nin a pair of parentheses."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import Controller, { route } from 'silvie/lib/http/controller';\nimport Post from 'models/post';\n\nexport default class PostsController implements Controller {\n    @route('GET', '/posts/:postId(\\d{3,})')\n    async getPost(req: any, res: any): void {\n        const post = await Post.find(req.params.postId);\n\n        res.send(post);\n    }\n    // Matches  /posts/132  /posts/2751\n}\n")),Object(a.b)("p",null,"This route will only respond to those request with a ",Object(a.b)("inlineCode",{parentName:"p"},"postId")," that has ",Object(a.b)("strong",{parentName:"p"},"3 or more digits"),"."))}c.isMDXComponent=!0},92:function(e,t,r){"use strict";r.d(t,"a",(function(){return b})),r.d(t,"b",(function(){return m}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=a.a.createContext({}),p=function(e){var t=a.a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},b=function(e){var t=p(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=p(r),d=n,m=b["".concat(l,".").concat(d)]||b[d]||u[d]||o;return r?a.a.createElement(m,i(i({ref:t},c),{},{components:r})):a.a.createElement(m,i({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var c=2;c<o;c++)l[c]=r[c];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"}}]);