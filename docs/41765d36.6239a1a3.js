(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{66:function(e,t,i){"use strict";i.r(t),i.d(t,"frontMatter",(function(){return l})),i.d(t,"metadata",(function(){return s})),i.d(t,"rightToc",(function(){return o})),i.d(t,"default",(function(){return b}));var a=i(2),n=i(6),r=(i(0),i(92)),l={id:"storage",title:"Storage Helper",sidebar_label:"Storage"},s={unversionedId:"storage",id:"storage",isDocsHomePage:!1,title:"Storage Helper",description:"There is a built-in storage system in Silvie to help you manage file system in the server. It creates a directory to be",source:"@site/docs/storage.md",slug:"/storage",permalink:"/docs/storage",version:"current",sidebar_label:"Storage",sidebar:"docsSidebar",previous:{title:"Database Helper",permalink:"/docs/database"},next:{title:"Routing",permalink:"/docs/routing"}},o=[{value:"Storage",id:"storage",children:[{value:"disks",id:"disks",children:[]}]},{value:"Disk",id:"disk",children:[{value:"disk.stat()",id:"diskstat",children:[]},{value:"disk.get()",id:"diskget",children:[]},{value:"disks.put()",id:"disksput",children:[]},{value:"disks.exists()",id:"disksexists",children:[]},{value:"disks.missing()",id:"disksmissing",children:[]},{value:"disks.rename()",id:"disksrename",children:[]},{value:"disks.move()",id:"disksmove",children:[]},{value:"disks.copy()",id:"diskscopy",children:[]},{value:"disks.copyFile()",id:"diskscopyfile",children:[]},{value:"disks.copyDirectory()",id:"diskscopydirectory",children:[]},{value:"disks.delete()",id:"disksdelete",children:[]},{value:"disks.deleteFile()",id:"disksdeletefile",children:[]},{value:"disks.deleteDirectory()",id:"disksdeletedirectory",children:[]},{value:"disks.makeDirectory()",id:"disksmakedirectory",children:[]},{value:"disks.readStreamFrom()",id:"disksreadstreamfrom",children:[]},{value:"disks.writeStreamTo()",id:"diskswritestreamto",children:[]}]},{value:"File",id:"file",children:[{value:"file.filename",id:"filefilename",children:[]},{value:"File()",id:"file-1",children:[]},{value:"file.name()",id:"filename",children:[]},{value:"file.path()",id:"filepath",children:[]},{value:"file.ext()",id:"fileext",children:[]},{value:"file.randomName()",id:"filerandomname",children:[]}]},{value:"Types",id:"types",children:[{value:"TEncoding",id:"tencoding",children:[]},{value:"TReadOptions",id:"treadoptions",children:[]},{value:"TWriteOptions",id:"twriteoptions",children:[]},{value:"TReadStreamOptions",id:"treadstreamoptions",children:[]},{value:"TWriteStreamOptions",id:"twritestreamoptions",children:[]}]}],c={rightToc:o};function b(e){var t=e.components,i=Object(n.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,i,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"There is a built-in storage system in Silvie to help you manage file system in the server. It creates a directory to be\nused for storage later. The storage must have one or more disks to store files in them. The disks will be isolated to\nprevent accessing the files out of that disk directory."),Object(r.b)("p",null,"Storage directory structure will be like this:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"project root\n\u2514\u2500 .silvie\n   \u2514\u2500 storage\n      \u251c\u2500 disk1\n      \u2502  \u251c\u2500 readme.txt\n      \u2502  \u251c\u2500 image.jpg\n      \u2502  \u2514\u2500 ...\n      \u251c\u2500 disk2\n      \u2502  \u251c\u2500 profiles\n      \u2502  \u2502  \u251c\u2500 user1.png\n      \u2502  \u2502  \u2514\u2500 ...\n      \u2502  \u251c\u2500 contract.pdf\n      \u2502  \u2514\u2500 ...\n      \u2514\u2500 ...\n")),Object(r.b)("p",null,"As you can see, Silvie creates a single directory for storage itself, and a directory for each disk that you have\ndefined in the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/configuration#disks"}),"disk part of Storage Configuration")," file. "),Object(r.b)("h2",{id:"storage"},"Storage"),Object(r.b)("p",null,"You are able to use the storage from the ",Object(r.b)("inlineCode",{parentName:"p"},"Storage")," class located at ",Object(r.b)("inlineCode",{parentName:"p"},"silvie/lib/storage"),". This class does nothing\nspecial by itself. It just initializes your disks and keeps them all together. The storage class will be initialized\nwhen your application starts and creates a static ",Object(r.b)("inlineCode",{parentName:"p"},"disks")," property on the Storage class, which contains the disk class\ninstances by their keys. "),Object(r.b)("h3",{id:"disks"},"disks"),Object(r.b)("p",null,"This is a static property on the storage class, it is an object which its key names are the disk names you've earlier\ndefined in your configuration file, and their value will be a Disk instance which handles file system operations in its\nown directory path."),Object(r.b)("p",null,"By default, there is a ",Object(r.b)("inlineCode",{parentName:"p"},"default")," disk in the storage configuration, here is how you can access a disk named ",Object(r.b)("em",{parentName:"p"},"'default'"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"import Storage from 'silvie/lib/storage';\n\nconst disk = Storage.disks.default;\n// Assigns the default disk to disk constant, to be used later  \n")),Object(r.b)("h2",{id:"disk"},"Disk"),Object(r.b)("p",null,"The Disk class wraps around the Node.js ",Object(r.b)("inlineCode",{parentName:"p"},"fs")," library to offer some helper methods with a boundary access protection and\npromisified methods to be easier and safer to use.  "),Object(r.b)("h3",{id:"diskstat"},"disk.stat()"),Object(r.b)("p",null,"This method takes a path string and returns a ",Object(r.b)("inlineCode",{parentName:"p"},"Stats")," object, giving you some extra information about that file. For\nmore information, read the docs about ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://nodejs.org/dist/latest-v15.x/docs/api/fs.html#fs_class_fs_stats"}),"Stats"),"."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"filename"),": This parameter takes a string indicating the path to file")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"disk.stat('./file.txt').then((stats) => {\n    console.log(stats.isDirectory() ? 'Directory' : 'File')\n});\n")),Object(r.b)("h3",{id:"diskget"},"disk.get()"),Object(r.b)("p",null,"Use this method to read a file. This method reads a file if it exists, and returns either a ",Object(r.b)("inlineCode",{parentName:"p"},"string")," or a ",Object(r.b)("inlineCode",{parentName:"p"},"Buffer"),"."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"filename"),": This parameter takes a string indicating the path to file"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"options"),": This parameter can be an ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#tencoding"}),"encoding string")," or file ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#treadoptions"}),"read options"))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"disk.get('./file.txt', 'utf8').then((contents) => {\n    console.log('Contents:', contents);\n});\n")),Object(r.b)("h3",{id:"disksput"},"disks.put()"),Object(r.b)("p",null,"This method will write a ",Object(r.b)("inlineCode",{parentName:"p"},"string")," or a ",Object(r.b)("inlineCode",{parentName:"p"},"buffer")," content to a file. It takes 3 parameters:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"filename"),": A string indicating the destination file name"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"contents"),": A string or a buffer to be written into the file"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"options"),": This parameter can be an ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#tencoding"}),"encoding string")," or file ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#twriteoptions"}),"write options"))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"disk.put('./file.txt', 'Test how it can be written to a file', 'utf8').then((state) => {\n    console.log(`Writing to file was ${!state && 'not '}successful`);\n});\n")),Object(r.b)("h3",{id:"disksexists"},"disks.exists()"),Object(r.b)("p",null,"This method checks to see weather a path exists or not, and returns a ",Object(r.b)("inlineCode",{parentName:"p"},"Boolean")," as the result."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"filename"),": A string indicating a directory or a file path")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"disk.exists('./images').then((state) => {\n    console.log(state ? 'exists' : `doesn't exist`);\n});\n")),Object(r.b)("h3",{id:"disksmissing"},"disks.missing()"),Object(r.b)("p",null,"This method does the opposite of the ",Object(r.b)("inlineCode",{parentName:"p"},"exists()")," method. It returns ",Object(r.b)("inlineCode",{parentName:"p"},"true")," if the path does not exist."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"filename"),": A string indicating a directory or a file path")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"disk.missing('./images').then((state) => {\n    console.log(state ? `it's missing` : `it's there`);\n});\n")),Object(r.b)("h3",{id:"disksrename"},"disks.rename()"),Object(r.b)("p",null,"This method will get a file and rename it to the given name. Note that this method does not move the file/directory, it\nonly changes the name of that file/directory, and it takes two parameters:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"filename"),": A string indicating a directory or a file path"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"newFilename"),": A string to rename the file or directory to that new name")),Object(r.b)("p",null,"This method returns ",Object(r.b)("inlineCode",{parentName:"p"},"true")," if it could rename successfully, and will fail if a file or directory already exists with\nthat name."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"disk.rename('./images/user2.png', 'user-2.png').then((state) => {\n    console.log(state ? `file has been renamed` : `couldn't rename the file`);\n});\n")),Object(r.b)("h3",{id:"disksmove"},"disks.move()"),Object(r.b)("p",null,"This method can be used to move a directory or a file, and returns with a ",Object(r.b)("inlineCode",{parentName:"p"},"Boolean")," state to indicate weather it was\nsuccessful or not. It takes two parameters:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"filename"),": This is a string indicating the path to the file you want to move around"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"newFilename"),": This parameter is a string to specify the new filename")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"disk.move('./images/user2.png', './images/users/user-2.png').then((state) => {\n    console.log(state ? `file has been moved` : `couldn't move the file`);\n});\n")),Object(r.b)("h3",{id:"diskscopy"},"disks.copy()"),Object(r.b)("p",null,"This method will copy a file or a directory, depending on which one it is, it uses different method to copy it. This\nmethod is a shorthand for the next two methods, in case you don't want to care about what you are copying. "),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"source"),": A string to indicate the source path"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"destination"),": A string to indicate the destination path")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"disk.copy('./images/users', './backups/images/users').then((state) => {\n    console.log(state ? `copied successfully` : `copy failed`);\n});\n")),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Because directories might have a nested structure, their children should also be copied into the new directory. That's\nwhy there are different methods for copying directories and files."))),Object(r.b)("h3",{id:"diskscopyfile"},"disks.copyFile()"),Object(r.b)("p",null,"This method will copy a file to a new location."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"filename"),": A string to indicate the source filename"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"destination"),": A string to indicate the destination file path")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"disk.copyFile('./documents/contract.pdf', './documents/user-2-contract.pdf').then((state) => {\n    console.log(state ? `copied successfully` : `copy failed`);\n});\n")),Object(r.b)("h3",{id:"diskscopydirectory"},"disks.copyDirectory()"),Object(r.b)("p",null,"This method will copy a directory to a new location. Since copying a directory needs a different approach. Silvie\nutilizes ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.npmjs.com/package/ncp"}),"ncp")," package to copy the whole directory."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"filename"),": A string to indicate the source filename"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"destination"),": A string to indicate the destination file path")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"disk.copyDirectory('./tmp/uploads', './documents/uploads').then((state) => {\n    console.log(state ? `copied successfully` : `copy failed`);\n});\n")),Object(r.b)("h3",{id:"disksdelete"},"disks.delete()"),Object(r.b)("p",null,"This method will delete a file or a directory, depending on which one it is, it uses different method to copy it. This\nmethod is a shorthand for the next two methods, in case you just want to delete something anyway. "),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"path"),": A string to indicate the path to a file or a directory"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"recursive?"),": A boolean to indicate if the children should also be deleted or not, it is ",Object(r.b)("inlineCode",{parentName:"li"},"false")," by default")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"disk.delete('./backups/images/users').then((state) => {\n    console.log(state ? `directory deleted` : `delete failed`);\n});\n")),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Because directories might have a nested structure, their children should also be deleted. You need to use a different\nmethod for deleting files and directories, or use the shorthand one."))),Object(r.b)("h3",{id:"disksdeletefile"},"disks.deleteFile()"),Object(r.b)("p",null,"This method will delete a file with the given filename."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"filename"),": A string to indicate the filename")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"disk.deleteFile('./images/user2.png').then((state) => {\n    console.log(state ? `copied successfully` : `delete failed`);\n});\n")),Object(r.b)("h3",{id:"disksdeletedirectory"},"disks.deleteDirectory()"),Object(r.b)("p",null,"This method will delete a directory with the given path. If you pass ",Object(r.b)("inlineCode",{parentName:"p"},"true")," for recursive, the children of\nthat directory will be deleted too.  "),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"path"),": A string to specify the path to that directory"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"recursive?"),": A boolean to indicate if the children should also be deleted or not, it is ",Object(r.b)("inlineCode",{parentName:"li"},"false")," by default")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"disk.deleteDirectory('./images/users').then((state) => {\n    console.log(state ? `deleted` : `delete failed`);\n});\n")),Object(r.b)("h3",{id:"disksmakedirectory"},"disks.makeDirectory()"),Object(r.b)("p",null,"This method will create a directory with the given path. There are some times that you want to create a nested\ndirectory, and the parent directories does not exist. You may specify the recursive flag to make sure the parents will\nalso be created."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"path"),": A string to specify the path to the directory"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"recursive?"),": A boolean to indicate if the missing parent directories should also be deleted or not, it is ",Object(r.b)("inlineCode",{parentName:"li"},"false")," by default"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"mode?"),": The permission of that directory. It is ",Object(r.b)("inlineCode",{parentName:"li"},"0o777")," by default")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"disk.makeDirectory('./uploads/gallery/2020').then((state) => {\n    console.log(state ? `directory created` : `create directory failed`);\n});\n")),Object(r.b)("h3",{id:"disksreadstreamfrom"},"disks.readStreamFrom()"),Object(r.b)("p",null,"This method will create a ",Object(r.b)("inlineCode",{parentName:"p"},"ReadStream")," instance from the give file path. This method will take the following parameters:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"path"),": A string indicating the path to the file"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"options?"),": This optional parameter will indicate the read stream options which is a ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#treadstreamoptions"}),"TReadStreamOptions")," type")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"disk.readStreamFrom('./videos/trailer.mp4').then((stream) => {\n    // Read data from the stream\n});\n")),Object(r.b)("h3",{id:"diskswritestreamto"},"disks.writeStreamTo()"),Object(r.b)("p",null,"This method will create a ",Object(r.b)("inlineCode",{parentName:"p"},"WriteStream")," instance to the give file path. This method will take the following parameters:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"path"),": A string indicating the path to the file"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"options?"),": This optional parameter will indicate the write stream options which is a ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#twritestreamoptions"}),"TWriteStreamOptions")," type")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"disk.writeStreamTo('./data/backup.dat').then((stream) => {\n    // Write data to the stream\n});\n")),Object(r.b)("h2",{id:"file"},"File"),Object(r.b)("p",null,"File class is a helper class to represent a file. It has some helper methods to create a file name. All of its methods\ncan be chained together."),Object(r.b)("h3",{id:"filefilename"},"file.filename"),Object(r.b)("p",null,"This property is a read only getter, which returns a string containing the full file path: ",Object(r.b)("inlineCode",{parentName:"p"},"FILE_PATH/FILE_NAME[.FILE_EXT]")),Object(r.b)("p",null,"If there was no extension it will omit the whole extension part."),Object(r.b)("h3",{id:"file-1"},"File()"),Object(r.b)("p",null,"The file constructor will take two optional parameters:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"filename?"),": The filename to be assigned to the file instance"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"extension?"),": This indicates the extension of the file instance")),Object(r.b)("p",null,"If you don't specify the extension, it will try to take the last dot-separated part of the file name as the extension."),Object(r.b)("p",null,"If file name wasn't specified, like passing ",Object(r.b)("inlineCode",{parentName:"p"},"null")," or ",Object(r.b)("inlineCode",{parentName:"p"},"undefined"),", It will generate a random file name and takes the\nextension from the second parameter if it is present. "),Object(r.b)("p",null,"If you pass no parameters to the constructor, It will only generate a random file name without extension."),Object(r.b)("h3",{id:"filename"},"file.name()"),Object(r.b)("p",null,"This method will set a filename for the file instance. "),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"filename"),": This is a string indicating the actual file name")),Object(r.b)("h3",{id:"filepath"},"file.path()"),Object(r.b)("p",null,"This method will set a path for the file instance."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"path"),": This is a string indicating the path to the file")),Object(r.b)("h3",{id:"fileext"},"file.ext()"),Object(r.b)("p",null,"This method will set an extension for the file instance."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"extension"),": This is a string indicating the extension")),Object(r.b)("h3",{id:"filerandomname"},"file.randomName()"),Object(r.b)("p",null,"This method has no parameters and uses the configuration in the\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/configuration#filename-hash-configuration"}),"file name hash part of Storage configuration")," file, to generate a random hash\nfor the filename."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"import File from 'silvie/lib/storage/file';\n\nnew File('hello_world', 'txt');\n// Creates a 'hello_world.txt' instance\n\nnew File(null, '.pdf');\n// Creates an instance like \n// '2bdfd7b9b53741adc5350abece5908bf5a77d6d73e0b838bd41ce67a6a27c9a8.pdf'\n\nnew File().path('/home/hmak/silvie').name('readme').ext('.md');\n// Creates '/home/hmak/silvie/readme.md' instance\n")),Object(r.b)("h2",{id:"types"},"Types"),Object(r.b)("p",null,"Some typescript custom types will be described here:  "),Object(r.b)("h3",{id:"tencoding"},"TEncoding"),Object(r.b)("p",null,"TEncoding is a that needs to be one of the following encoding names:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"ascii"),Object(r.b)("li",{parentName:"ul"},"base64"),Object(r.b)("li",{parentName:"ul"},"binary"),Object(r.b)("li",{parentName:"ul"},"hex"),Object(r.b)("li",{parentName:"ul"},"latin1"),Object(r.b)("li",{parentName:"ul"},"ucs2"),Object(r.b)("li",{parentName:"ul"},"ucs-2"),Object(r.b)("li",{parentName:"ul"},"utf8"),Object(r.b)("li",{parentName:"ul"},"utf-8"),Object(r.b)("li",{parentName:"ul"},"utf16le")),Object(r.b)("h3",{id:"treadoptions"},"TReadOptions"),Object(r.b)("p",null,"This option can be a ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#tencoding"}),"TEncoding")," or an object containing two properties:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"encoding"),": This needs to be a string of ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#tencoding"}),"TEncoding")," type "),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"flag"),": This needs to be a file system flag like ",Object(r.b)("inlineCode",{parentName:"li"},"'a'"),", ",Object(r.b)("inlineCode",{parentName:"li"},"'rw'"),", ",Object(r.b)("inlineCode",{parentName:"li"},"'r'"),", etc. ")),Object(r.b)("h3",{id:"twriteoptions"},"TWriteOptions"),Object(r.b)("p",null,"Parameters of this type can either be a ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#tencoding"}),"TEncoding")," or an object containing two properties:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"encoding"),": This needs to be a string of ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#tencoding"}),"TEncoding")," type "),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"flag"),": This needs to be a file system flag like ",Object(r.b)("inlineCode",{parentName:"li"},"'a'"),", ",Object(r.b)("inlineCode",{parentName:"li"},"'w'"),", ",Object(r.b)("inlineCode",{parentName:"li"},"'r'"),", etc. ")),Object(r.b)("h3",{id:"treadstreamoptions"},"TReadStreamOptions"),Object(r.b)("p",null,"The options of this kind can either be a ",Object(r.b)("inlineCode",{parentName:"p"},"string")," indicating the encoding or an ",Object(r.b)("inlineCode",{parentName:"p"},"object")," with the following properties:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"flag"),": This needs to be a file system flag like ",Object(r.b)("inlineCode",{parentName:"li"},"'a'"),", ",Object(r.b)("inlineCode",{parentName:"li"},"'w'"),", ",Object(r.b)("inlineCode",{parentName:"li"},"'r'"),", etc. This will be ",Object(r.b)("inlineCode",{parentName:"li"},"r")," by default"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"encoding"),": An string to indicate the encoding to read the file, defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"null")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"fd"),": This is a number indicating a blocking file descriptor, defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"null")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"mode"),": The permission to be set on the file, defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"0o666")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"autoClose"),": A boolean indicating weather to close the file descriptor or not, defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"true")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"emitClose"),": A boolean indicating weather to emit a ",Object(r.b)("inlineCode",{parentName:"li"},"close")," event after stream has been destroyed or not. Defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"false")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"start"),": An integer to specify the start of reading range, defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"0")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"end"),": An integer to specify the end of the reading range, defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"Infinity")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"highWaterMark"),": An integer indicating the buffer size, defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"64 kb")," = ",Object(r.b)("inlineCode",{parentName:"li"},"64 * 1024")," "),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"fs"),": This option will override the fs implementations, defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"null"))),Object(r.b)("h3",{id:"twritestreamoptions"},"TWriteStreamOptions"),Object(r.b)("p",null,"The options of this kind can either be a ",Object(r.b)("inlineCode",{parentName:"p"},"string")," indicating the encoding or an ",Object(r.b)("inlineCode",{parentName:"p"},"object")," with the following properties:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"flag"),": This needs to be a file system flag like ",Object(r.b)("inlineCode",{parentName:"li"},"'a'"),", ",Object(r.b)("inlineCode",{parentName:"li"},"'w'"),", ",Object(r.b)("inlineCode",{parentName:"li"},"'r'"),", etc. This will be ",Object(r.b)("inlineCode",{parentName:"li"},"w")," by default"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"encoding"),": An string to indicate the encoding to read the file, defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"utf8")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"fd"),": This is a number indicating a blocking file descriptor, defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"null")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"mode"),": The permission to be set on the file, defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"0o666")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"autoClose"),": A boolean indicating weather to close the file descriptor or not, defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"true")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"emitClose"),": A boolean indicating weather to emit a ",Object(r.b)("inlineCode",{parentName:"li"},"close")," event after stream has been destroyed or not. Defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"false")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"start"),": An integer to specify the start of reading range, defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"0")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"fs"),": This option will override the fs implementations, defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"null"))))}b.isMDXComponent=!0},92:function(e,t,i){"use strict";i.d(t,"a",(function(){return d})),i.d(t,"b",(function(){return h}));var a=i(0),n=i.n(a);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function l(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,a)}return i}function s(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?l(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):l(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,a,n=function(e,t){if(null==e)return{};var i,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)i=r[a],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)i=r[a],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var c=n.a.createContext({}),b=function(e){var t=n.a.useContext(c),i=t;return e&&(i="function"==typeof e?e(t):s(s({},t),e)),i},d=function(e){var t=b(e.components);return n.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},m=n.a.forwardRef((function(e,t){var i=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=b(i),m=a,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||r;return i?n.a.createElement(h,s(s({ref:t},c),{},{components:i})):n.a.createElement(h,s({ref:t},c))}));function h(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=i.length,l=new Array(r);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var c=2;c<r;c++)l[c]=i[c];return n.a.createElement.apply(null,l)}return n.a.createElement.apply(null,i)}m.displayName="MDXCreateElement"}}]);